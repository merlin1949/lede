# =================================================
# OpenWrt x86 虚拟机专用编译配置文件
# 功能：自动修复依赖/缓存加速/错误日志收集
# 更新日期：2024-04-20
# =================================================

name: OpenWrt x86 Build

on:
  workflow_dispatch:  # 手动触发
  push:
    branches: [ main ]  # 代码推送触发

env:
  CCACHE_DIR: /tmp/ccache  # 缓存目录
  TARGET: x86  # 目标架构
  SUBTARGET: 64  # 子架构
  FIRMWARE_DIR: bin/targets/x86/64  # 固定路径避免变量嵌套问题

jobs:
  build:
    runs-on: ubuntu-22.04  # 必须使用 22.04 系统
    timeout-minutes: 240  # 超时时间（4小时）

    steps:
    # ---------------------- 阶段1：源码初始化 ----------------------
    - name: 🔄 拉取源码
      uses: actions/checkout@v4
      with:
        path: lede  # 确保代码不会出现在 lede/lede 目录
        submodules: recursive  # 必须递归克隆子模块
        fetch-depth: 1  # 加速克隆

    # ---------------------- 阶段2：安装系统依赖 ----------------------
    - name: 📦 安装编译工具
      run: |
        sudo apt-get update -y
        sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib \
          gettext git libncurses5-dev libssl-dev python3 python3-pip rsync unzip zlib1g-dev \
          libelf-dev liblzma-dev lib32z1-dev pkg-config autoconf ncurses-term ncurses-base

    # ---------------------- 阶段3：检查 lede 目录 ----------------------
    - name: 🔄 确保 lede 目录存在
      run: |
        if [ ! -d "lede" ]; then
          echo "❌ 目录 lede 不存在，尝试重新克隆！"
          git clone --depth=1 https://github.com/coolsnowwolf/lede.git lede
        fi

    # ---------------------- 阶段4：执行 diy-part1.sh ----------------------
    - name: 🛠️ 执行自定义脚本1
      run: |
        cd lede  # 确保在正确目录执行
        chmod +x diy-part1.sh
        ./diy-part1.sh || echo "⚠️ diy-part1.sh 执行出错，但继续运行"

    # ---------------------- 阶段5：生成编译配置 ----------------------
    - name: ⚙️ 生成配置
      run: |
        cd lede
        [ -f .config ] && cp .config .config.bak || true
        make defconfig

        chmod +x diy-part2.sh
        ./diy-part2.sh || echo "⚠️ diy-part2.sh 执行出错，但继续运行"

    # ---------------------- 阶段6：核心编译 ----------------------
    - name: 🔨 开始编译
      run: |
        cd lede
        MAX_CORES=$(nproc)
        SAFE_CORES=$(( MAX_CORES > 4 ? 4 : MAX_CORES ))
        mkdir -p tmp/work/logs
        set -o pipefail
        time make -j$SAFE_CORES V=sc 2>&1 | tee build.log tmp/work/logs/full.log

        [ -f $FIRMWARE_DIR/*.img ] || (echo "❌ 固件未生成"; exit 1)

    # ---------------------- 阶段7：打包并上传 ----------------------
    - name: 📦 打包输出
      run: |
        cd lede
        RELEASE_NAME="openwrt_x86_$(date +'%Y%m%d_%H%M')"
        mkdir -p $RELEASE_NAME
        cp $FIRMWARE_DIR/*.{img,sha256sum} $RELEASE_NAME/
        cp build.log $RELEASE_NAME/
        tar -czvf $RELEASE_NAME.tar.gz $RELEASE_NAME

    - name: ⬆️ 上传固件
      uses: actions/upload-artifact@v4
      with:
        name: openwrt-x86
        path: lede/*.tar.gz
        retention-days: 7

    # ---------------------- 阶段8：错误日志处理 ----------------------
    - name: 🚨 上传错误日志
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: error-logs
        path: |
          lede/build.log
          lede/tmp/work/logs/*.log
