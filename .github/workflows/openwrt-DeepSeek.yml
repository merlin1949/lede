# ==============================================================
# OpenWrt 自动化编译配置文件 (终极修复版)
# 更新日期：2024-04-20
# 修复内容：依赖缺失/日志路径/缓存错误
# ==============================================================

name: 🚀 OpenWrt CI/CD Pipeline

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build:
    name: 🛠️ 编译固件
    runs-on: ubuntu-22.04
    timeout-minutes: 360

    env:
      CCACHE_DIR: /tmp/ccache
      TARGET: x86
      SUBTARGET: 64
      FIRMWARE_DIR: "bin/targets/x86/64"  # 固定路径

    steps:
    # -------------------------------------------------------------------
    # 阶段1：代码初始化
    # -------------------------------------------------------------------
    - name: 🔄 拉取源码
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 1

    # -------------------------------------------------------------------
    # 阶段2：缓存管理
    # -------------------------------------------------------------------
    - name: 📦 加载缓存
      uses: actions/cache@v3
      id: cache
      with:
        path: |
          ${{ env.CCACHE_DIR }}
          dl
          build_dir
        key: ${{ runner.os }}-${{ env.TARGET }}-${{ env.SUBTARGET }}-${{ hashFiles('.config') }}-v27

    # -------------------------------------------------------------------
    # 阶段3：系统依赖
    # -------------------------------------------------------------------
    - name: 📦 安装编译工具
      run: |
        for i in {1..3}; do
          sudo apt-get update && \
          sudo apt-get install -y \
            build-essential clang flex bison g++ gawk gcc-multilib gettext git \
            libncurses5-dev libssl-dev python3 python3-pip libelf-dev liblzma-dev \
            zlib1g-dev file wget jq rsync unzip autoconf pkg-config \
          && break || sleep 30
        done
        sudo ln -sf /usr/bin/python3 /usr/bin/python

    # -------------------------------------------------------------------
    # 阶段4：预下载源码
    # -------------------------------------------------------------------
    - name: ⚡ 初始化工具链
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        mkdir -p dl build_dir
        make download -j$(nproc) || make download -j1

    # -------------------------------------------------------------------
    # 阶段5：软件源配置
    # -------------------------------------------------------------------
    - name: ⚙️ 配置Feeds
      run: |
        cat << EOF > feeds.conf.default
        src-git packages https://github.com/coolsnowwolf/packages
        src-git luci https://github.com/coolsnowwolf/luci
        src-git unblockmusic https://github.com/UnblockNeteaseMusic/luci-app-unblockneteasemusic
        src-git adbyby https://github.com/Adbyby-Team/adbyby-rule
        EOF

        n=0
        until [ $n -ge 3 ]; do
          ./scripts/feeds update -a && break
          n=$((n+1))
          sleep 15
        done
        ./scripts/feeds install -a --force

    # -------------------------------------------------------------------
    # 阶段6：编译配置
    # -------------------------------------------------------------------
    - name: ⚙️ 生成配置
      run: |
        [ -f .config ] && cp .config .config.bak || true
        make defconfig
        ./scripts/diffconfig.sh > .config

        # 强制修复关键依赖
        REQUIRED_DEPS=(
          "CONFIG_PACKAGE_lm-sensors=y"
          "CONFIG_PACKAGE_wsdd2=y"
          "CONFIG_PACKAGE_autosamba=y"
          "CONFIG_PACKAGE_libudev=y"
        )
        for dep in "${REQUIRED_DEPS[@]}"; do
          if ! grep -q "$dep" .config; then
            echo "$dep" >> .config
          fi
        done

        echo 'CONFIG_CCACHE=y' >> .config
        echo "CONFIG_CCACHE_DIR=\"$CCACHE_DIR\"" >> .config

    # -------------------------------------------------------------------
    # 阶段7：核心编译
    # -------------------------------------------------------------------
    - name: 🔨 开始编译
      run: |
        mkdir -p tmp/work/logs
        MAX_CORES=$(($(nproc) > 4 ? 4 : $(nproc)))
        
        # 强制记录完整日志
        set -o pipefail
        time make -j$MAX_CORES V=sc 2>&1 | tee build.log tmp/work/logs/full.log
        
        # 验证固件存在性
        [ -f $FIRMWARE_DIR/*.img ] || (echo "❌ 固件未生成"; exit 1)

    # -------------------------------------------------------------------
    # 阶段8：产物处理
    # -------------------------------------------------------------------
    - name: 📦 打包输出
      run: |
        RELEASE_NAME="openwrt_$(date +'%Y%m%d_%H%M')"
        mkdir -p $RELEASE_NAME
        cp $FIRMWARE_DIR/*.{img,sha256sum} $RELEASE_NAME/
        cp build.log $RELEASE_NAME/
        tar -czvf $RELEASE_NAME.tar.gz $RELEASE_NAME

    - name: ⬆️ 上传固件
      uses: actions/upload-artifact@v4
      with:
        name: openwrt-build
        path: "*.tar.gz"
        retention-days: 7

    # -------------------------------------------------------------------
    # 阶段9：错误处理
    # -------------------------------------------------------------------
    - name: 🚨 上传错误日志
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: error-logs
        path: |
          build.log
          tmp/work/logs/*.log
