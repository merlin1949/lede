# =================================================
# OpenWrt x86 虚拟机专用编译配置文件
# 功能：自动修复依赖/缓存加速/错误日志收集
# 更新日期：2024-04-20
# =================================================

name: OpenWrt x86 Build

on:
  workflow_dispatch:  # 手动触发
  push:
    branches: [ main ] # 代码推送触发

env:
  CCACHE_DIR: /tmp/ccache  # 缓存目录
  TARGET: x86              # 目标架构
  SUBTARGET: 64            # 子架构
  FIRMWARE_DIR: bin/targets/x86/64  # 固定路径避免变量嵌套问题

jobs:
  build:
    runs-on: ubuntu-22.04  # 必须使用22.04系统
    timeout-minutes: 240   # 超时时间（4小时）

    steps:
    # ---------------------- 阶段1：源码初始化 ----------------------
    - name: 🔄 拉取源码
      uses: actions/checkout@v4
      with:
        submodules: recursive  # 必须递归克隆子模块
        fetch-depth: 1         # 加速克隆

    # ---------------------- 阶段2：缓存管理 ----------------------
    - name: 📦 加载缓存
      uses: actions/cache@v3
      id: cache
      with:
        path: |
          ${{ env.CCACHE_DIR }}
          dl
          build_dir
        key: ${{ runner.os }}-x86-64-${{ hashFiles('.config') }}-v3  # 版本标识

    # ---------------------- 阶段3：安装系统依赖 ----------------------
    - name: 📦 安装编译工具
      run: |
        sudo apt-get update -y
        # 安装所有必要依赖（包含终端修复包）
        sudo apt-get install -y build-essential clang flex bison g++ gawk gcc-multilib \
          gettext git libncurses5-dev libssl-dev python3 python3-pip rsync unzip zlib1g-dev \
          libelf-dev liblzma-dev lib32z1-dev pkg-config autoconf ncurses-term ncurses-base

        # 修复终端环境变量
        echo "TERM=linux" >> $GITHUB_ENV
        echo "TERMINFO=/usr/share/terminfo" >> $GITHUB_ENV

    # ---------------------- 阶段4：软件源配置 ----------------------
    - name: ⚙️ 配置软件源
      run: |
        # 使用你现有的 feeds.conf.default
        n=0
        until [ $n -ge 3 ]; do
          ./scripts/feeds update -a && break
          n=$((n+1))
          sleep 15
        done
        ./scripts/feeds install -a --force

    # ---------------------- 新增阶段：执行 diy-part1.sh ----------------------
    - name: 🛠️ 执行自定义脚本1
      run: |
        chmod +x diy-part1.sh
        ./diy-part1.sh

    # ---------------------- 阶段5：生成编译配置 ----------------------
    - name: ⚙️ 生成配置
      run: |
        # 合并旧配置（如果存在）
        [ -f .config ] && cp .config .config.bak || true
        make defconfig

        # 执行 diy-part2.sh
        chmod +x diy-part2.sh
        ./diy-part2.sh

        # 自动修复常见缺失依赖
        REQUIRED_DEPS=(
          "CONFIG_PACKAGE_lm-sensors=y"
          "CONFIG_PACKAGE_wsdd2=y"
          "CONFIG_PACKAGE_bc=y"
          "CONFIG_PACKAGE_libpam=y"
          "CONFIG_PACKAGE_luci-base=y"
        )
        for dep in "${REQUIRED_DEPS[@]}"; do
          grep -q "$dep" .config || echo "$dep" >> .config
        done

        # 启用ccache加速
        echo "CONFIG_CCACHE=y" >> .config
        echo "CONFIG_CCACHE_DIR=\"$CCACHE_DIR\"" >> .config

    # ---------------------- 阶段6：核心编译 ----------------------
    - name: 🔨 开始编译
      run: |
        # 动态线程控制（防止OOM）
        MAX_CORES=$(nproc)
        SAFE_CORES=$(( MAX_CORES > 4 ? 4 : MAX_CORES ))

        # 强制记录完整日志
        mkdir -p tmp/work/logs
        set -o pipefail
        time make -j$SAFE_CORES V=sc 2>&1 | tee build.log tmp/work/logs/full.log

        # 验证固件存在性
        [ -f $FIRMWARE_DIR/*.img ] || (echo "❌ 固件未生成"; exit 1)

    # ---------------------- 阶段7：产物处理 ----------------------
    - name: 📦 打包输出
      run: |
        RELEASE_NAME="openwrt_x86_$(date +'%Y%m%d_%H%M')"
        mkdir -p $RELEASE_NAME
        cp $FIRMWARE_DIR/*.{img,sha256sum} $RELEASE_NAME/
        cp build.log $RELEASE_NAME/
        tar -czvf $RELEASE_NAME.tar.gz $RELEASE_NAME

    - name: ⬆️ 上传固件
      uses: actions/upload-artifact@v4
      with:
        name: openwrt-x86
        path: "*.tar.gz"
        retention-days: 7

    # ---------------------- 阶段8：错误处理 ----------------------
    - name: 🚨 上传错误日志
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: error-logs
        path: |
          build.log
          tmp/work/logs/*.log
