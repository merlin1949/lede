name: Build OpenWrt (Lede)

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 0"

concurrency:
  group: openwrt-build
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    container: ubuntu:22.04
    env:
      TERM: xterm                # 全局设置终端类型
      FORCE_UNSAFE_CONFIGURE: 1  # 全局设置不安全配置权限

    steps:
      # 1️⃣ 系统检查和空间清理（增强版）
      - name: Check System Info
        run: |
          echo "🔍 System Check Start"
          df -h
          free -h
          echo "🧹 Cleaning system caches..."
          apt clean
          rm -rf /var/lib/apt/lists/*
          journalctl --vacuum-size=50M
          echo "✅ System Check Completed"

      # 2️⃣ 安装核心工具链（优化依赖项）
      - name: Install Build Tools
        run: |
          apt update && apt install -y \
            build-essential clang flex g++ gawk gcc-multilib gettext \
            git libncurses5-dev libssl-dev libelf-dev python3 python3-distutils \
            rsync unzip wget zlib1g-dev ccache ncurses-term
          ccache --max-size=2G  # 设置ccache缓存上限

      # 3️⃣ 源码克隆（增加子模块深度）
      - name: Clone Lede Repository
        run: |
          git clone --depth=1 --recurse-submodules --shallow-submodules \
            https://github.com/coolsnowwolf/lede.git lede
          cd lede
          git submodule update --init --depth=1

      # 4️⃣ 预下载资源（增加重试机制）
      - name: Pre-download Packages
        run: |
          cd lede
          for i in {1..3}; do
            make download -j$(nproc) && break || sleep 30
          done

      # 5️⃣ 自定义脚本执行（增加错误处理）
      - name: Run Custom Scripts
        run: |
          cd lede
          [ -f diy-part1.sh ] && chmod +x diy-part1.sh && ./diy-part1.sh || true
          [ -f diy-part2.sh ] && chmod +x diy-part2.sh && ./diy-part2.sh || true
          mkdir -p logs  # 强制创建日志目录

      # 6️⃣ 配置处理（增强健壮性）
      - name: Apply Configuration
        run: |
          cd lede
          [ -e .config ] && mv .config .config.bak
          cp ${{ github.workspace }}/.config .   # 从仓库加载预置配置
          make defconfig
          ./scripts/diffconfig.sh > config.diff

      # 7️⃣ 核心编译流程（优化资源使用）
      - name: Compile OpenWrt
        run: |
          cd lede
          echo "🧠 Using $(nproc) threads"
          make -j$(($(nproc) - 1)) V=s 2>&1 | tee build.log
          find bin/ -name '*.img' -ls

      # 8️⃣ 结果处理（失败时仍上传日志）
      - name: Post-build Actions
        if: always()
        run: |
          cd lede
          echo "📦 Final disk usage:"
          du -h -d 1
          echo "🔄 CCache statistics:"
          ccache -s

      # 9️⃣ 智能上传（自动检测产物）
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-build-${{ github.run_id }}
          path: |
            lede/bin/targets/**/*.img
            lede/bin/targets/**/*.gz
            lede/config.diff
          retention-days: 3

      # 🔟 日志收集（强制路径检测）
      - name: Upload Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ github.run_id }}
          path: |
            lede/build.log
            lede/logs/**/*
            lede/.config
            lede/.config.bak
